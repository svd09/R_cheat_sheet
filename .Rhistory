uci <- est + 1.96*se
return(tibble(variable = df$term,
est = df$estimate,
lower95 = lci,
upper95 = uci,
p_value = df$p.value))
}
if(model == "cox"){
est <- exp(df$estimate)
se <- df$std.error
lci <- exp(est - 1.96*se)
uci <- exp(est + 1.96*se)
return(tibble(variable = df$term,
HR = exp(df$estimate),
HR_lower95 = lci,
HR_upper95 = uci,
p_value = df$p.value))
}
}
pooled_ci(4445)
pooled_ci <- function(df, model = c("glm","lm","coxph")){
if(!data.frame(df)) print("not a data-frame")
if(model == "glm"){
est <- exp(df$estimate)
se <- df$std.error
lci <- exp(est - 1.96*se)
uci <- exp(est + 1.96*se)
return(tibble(variable = df$term,
OR = exp(df$estimate),
OR_lower95 = lci,
OR_upper95 = uci,
p_value = df$p.value))
}
if(model == "lm"){
est <- df$estimate
se <- df$std.error
lci <- est - 1.96*se
uci <- est + 1.96*se
return(tibble(variable = df$term,
est = df$estimate,
lower95 = lci,
upper95 = uci,
p_value = df$p.value))
}
if(model == "cox"){
est <- exp(df$estimate)
se <- df$std.error
lci <- exp(est - 1.96*se)
uci <- exp(est + 1.96*se)
return(tibble(variable = df$term,
HR = exp(df$estimate),
HR_lower95 = lci,
HR_upper95 = uci,
p_value = df$p.value))
}
}
pooled_ci(4445)
pooled_ci <- function(df, model = c("glm","lm","coxph")){
stopifnot(is.data,frame(df))
stopifnot(is.character(model))
if(model == "glm"){
est <- exp(df$estimate)
se <- df$std.error
lci <- exp(est - 1.96*se)
uci <- exp(est + 1.96*se)
return(tibble(variable = df$term,
OR = exp(df$estimate),
OR_lower95 = lci,
OR_upper95 = uci,
p_value = df$p.value))
}
if(model == "lm"){
est <- df$estimate
se <- df$std.error
lci <- est - 1.96*se
uci <- est + 1.96*se
return(tibble(variable = df$term,
est = df$estimate,
lower95 = lci,
upper95 = uci,
p_value = df$p.value))
}
if(model == "cox"){
est <- exp(df$estimate)
se <- df$std.error
lci <- exp(est - 1.96*se)
uci <- exp(est + 1.96*se)
return(tibble(variable = df$term,
HR = exp(df$estimate),
HR_lower95 = lci,
HR_upper95 = uci,
p_value = df$p.value))
}
}
pooled_ci <- function(df, model = c("glm","lm","coxph")){
stopifnot(is.data,frame(df))
stopifnot(is.character(model))
if(model == "glm"){
est <- exp(df$estimate)
se <- df$std.error
lci <- exp(est - 1.96*se)
uci <- exp(est + 1.96*se)
return(tibble(variable = df$term,
OR = exp(df$estimate),
OR_lower95 = lci,
OR_upper95 = uci,
p_value = df$p.value))
}
if(model == "lm"){
est <- df$estimate
se <- df$std.error
lci <- est - 1.96*se
uci <- est + 1.96*se
return(tibble(variable = df$term,
est = df$estimate,
lower95 = lci,
upper95 = uci,
p_value = df$p.value),
"results of lm model pooled")
}
if(model == "cox"){
est <- exp(df$estimate)
se <- df$std.error
lci <- exp(est - 1.96*se)
uci <- exp(est + 1.96*se)
return(tibble(variable = df$term,
HR = exp(df$estimate),
HR_lower95 = lci,
HR_upper95 = uci,
p_value = df$p.value))
}
}
pooled_ci(model_summ, model = "lm")
pooled_ci <- function(df, model = c("glm","lm","coxph")){
stopifnot(is.data.frame(df))
stopifnot(is.character(model))
if(model == "glm"){
est <- exp(df$estimate)
se <- df$std.error
lci <- exp(est - 1.96*se)
uci <- exp(est + 1.96*se)
return(tibble(variable = df$term,
OR = exp(df$estimate),
OR_lower95 = lci,
OR_upper95 = uci,
p_value = df$p.value))
}
if(model == "lm"){
est <- df$estimate
se <- df$std.error
lci <- est - 1.96*se
uci <- est + 1.96*se
return(tibble(variable = df$term,
est = df$estimate,
lower95 = lci,
upper95 = uci,
p_value = df$p.value),
"results of lm model pooled")
}
if(model == "cox"){
est <- exp(df$estimate)
se <- df$std.error
lci <- exp(est - 1.96*se)
uci <- exp(est + 1.96*se)
return(tibble(variable = df$term,
HR = exp(df$estimate),
HR_lower95 = lci,
HR_upper95 = uci,
p_value = df$p.value))
}
}
pooled_ci(model_summ, model = "lm")
pooled_ci <- function(df, model = c("glm","lm","coxph")){
stopifnot(is.data.frame(df))
stopifnot(is.character(model))
if(model == "glm"){
est <- exp(df$estimate)
se <- df$std.error
lci <- exp(est - 1.96*se)
uci <- exp(est + 1.96*se)
return(tibble(variable = df$term,
OR = exp(df$estimate),
OR_lower95 = lci,
OR_upper95 = uci,
p_value = df$p.value))
}
if(model == "lm"){
est <- df$estimate
se <- df$std.error
lci <- est - 1.96*se
uci <- est + 1.96*se
return(tibble(variable = df$term,
est = df$estimate,
lower95 = lci,
upper95 = uci,
p_value = df$p.value))
return("Results of the lm model")
}
if(model == "cox"){
est <- exp(df$estimate)
se <- df$std.error
lci <- exp(est - 1.96*se)
uci <- exp(est + 1.96*se)
return(tibble(variable = df$term,
HR = exp(df$estimate),
HR_lower95 = lci,
HR_upper95 = uci,
p_value = df$p.value))
}
}
pooled_ci(model_summ, model = "lm")
pooled_ci <- function(df, model = c("glm","lm","coxph")){
stopifnot(is.data.frame(df))
stopifnot(is.character(model))
if(model == "glm"){
est <- exp(df$estimate)
se <- df$std.error
lci <- exp(est - 1.96*se)
uci <- exp(est + 1.96*se)
return(tibble(variable = df$term,
OR = exp(df$estimate),
OR_lower95 = lci,
OR_upper95 = uci,
p_value = df$p.value))
}
if(model == "lm"){
est <- df$estimate
se <- df$std.error
lci <- est - 1.96*se
uci <- est + 1.96*se
return(list(tibble(variable = df$term,
est = df$estimate,
lower95 = lci,
upper95 = uci,
p_value = df$p.value)), "results of pooling lm object")
}
if(model == "cox"){
est <- exp(df$estimate)
se <- df$std.error
lci <- exp(est - 1.96*se)
uci <- exp(est + 1.96*se)
return(tibble(variable = df$term,
HR = exp(df$estimate),
HR_lower95 = lci,
HR_upper95 = uci,
p_value = df$p.value))
}
}
pooled_ci(model_summ, model = "lm")
pooled_ci <- function(df, model = c("glm","lm","coxph")){
stopifnot(is.data.frame(df))
stopifnot(is.character(model))
if(model == "glm"){
est <- exp(df$estimate)
se <- df$std.error
lci <- exp(est - 1.96*se)
uci <- exp(est + 1.96*se)
return(tibble(variable = df$term,
OR = exp(df$estimate),
OR_lower95 = lci,
OR_upper95 = uci,
p_value = df$p.value))
}
if(model == "lm"){
est <- df$estimate
se <- df$std.error
lci <- est - 1.96*se
uci <- est + 1.96*se
result <- tibble(variable = df$term,
est = df$estimate,
lower95 = lci,
upper95 = uci,
p_value = df$p.value)
return(list(result,print("results of pooling lm object")))
}
if(model == "cox"){
est <- exp(df$estimate)
se <- df$std.error
lci <- exp(est - 1.96*se)
uci <- exp(est + 1.96*se)
return(tibble(variable = df$term,
HR = exp(df$estimate),
HR_lower95 = lci,
HR_upper95 = uci,
p_value = df$p.value))
}
}
pooled_ci(model_summ, model = "lm")
df <- mtcars
ggplot(data = df, aes(x = mpg)) + geom_histogram()
df <- mtcars
ggplot(data = df, aes(x = mpg)) + geom_histogram(color = "blue",
fill = "white")
df <- mtcars
ggplot(data = df, aes(x = mpg)) +
geom_histogram(color = "blue", fill = "white") +
# provide fill for filling bars and color for border of bars
labs(title = "histogram", x = "Count", y = "Miles Per Gallon")
df <- mtcars
ggplot(data = df, aes(x = mpg)) +
geom_histogram(color = "blue", fill = "white") +
# provide fill for filling bars and color for border of bars
labs(title = "Histogram of MPG from mtcars dataset", x = "Count", y = "Miles Per Gallon") +
# labelling of the histogram
theme(plot.title = element_text(hjust = 0.5))
# center the plot title
df <- mtcars
ggplot(data = df, aes(x = mpg)) +
geom_histogram(color = "blue", fill = "white") +
# provide fill for filling bars and color for border of bars
labs(title = "Histogram of MPG from mtcars dataset", x = "Count", y = "Miles Per Gallon",
caption = "Data abstracted from the World Health Organisation") +
# labelling of the histogram
theme(plot.title = element_text(hjust = 0.5))
# center the plot title
df <- mtcars
ggplot(data = df, aes(x = mpg)) +
geom_histogram(color = "blue", fill = "white") +
# provide fill for filling bars and color for border of bars
labs(title = "Histogram of MPG from mtcars dataset", x = "Count", y = "Miles Per Gallon",
caption = "Data abstracted from the World Health Organisation") +
# labelling of the histogram
theme(plot.title = element_text(hjust = 0.5)) +
# center the plot title
theme(plot.caption = theme(font.face = "italic"))
df <- mtcars
ggplot(data = df, aes(x = mpg)) +
geom_histogram(color = "blue", fill = "white") +
# provide fill for filling bars and color for border of bars
labs(title = "Histogram of MPG from mtcars dataset", x = "Count", y = "Miles Per Gallon",
caption = "Data abstracted from the World Health Organisation") +
# labelling of the histogram
theme(plot.title = element_text(hjust = 0.5)) +
# center the plot title
theme(plot.caption = element_text(font.face = "italic"))
df <- mtcars
ggplot(data = df, aes(x = mpg)) +
geom_histogram(color = "blue", fill = "white") +
# provide fill for filling bars and color for border of bars
labs(title = "Histogram of MPG from mtcars dataset", x = "Count", y = "Miles Per Gallon",
caption = "Data abstracted from the World Health Organisation") +
# labelling of the histogram
theme(plot.title = element_text(hjust = 0.5)) +
# center the plot title
theme(plot.caption = element_text(face = "italic",family = "Verdana"))
df <- mtcars
ggplot(data = df, aes(x = mpg)) +
geom_histogram(color = "blue", fill = "white") +
# provide fill for filling bars and color for border of bars
labs(title = "Histogram of MPG from mtcars dataset", x = "Count", y = "Miles Per Gallon",
caption = "Data abstracted from the World Health Organisation") +
# labelling of the histogram
theme(plot.title = element_text(hjust = 0.5)) +
# center the plot title
theme(plot.caption = element_text(face = "italic",size = 8))
library(tidyverse) # import csv
library(haven) # import SAS, SPSS, STATA
library(readxl) # import excel files
library(stringr); library(magrittr);library(ggthemes)
library(naniar);library(mice);library(Amelia);library(miceadds)
df <- mtcars
ggplot(data = df, aes(x = mpg)) +
geom_histogram(color = "blue", fill = "white") +
# provide fill for filling bars and color for border of bars
labs(title = "Histogram of MPG from mtcars dataset", x = "Count", y = "Miles Per Gallon",
caption = "Data abstracted from the World Health Organisation") +
# labelling of the histogram
theme(plot.title = element_text(hjust = 0.5)) +
# center the plot title
theme(plot.caption = element_text(face = "italic",size = 8)) +
# adding theme from ggthemes
theme_clean()
df <- mtcars
ggplot(data = df, aes(x = mpg)) +
geom_histogram(color = "blue", fill = "gray") +
# provide fill for filling bars and color for border of bars
labs(title = "Histogram of MPG from mtcars dataset", x = "Count", y = "Miles Per Gallon",
caption = "Data abstracted from the World Health Organisation") +
# labelling of the histogram
theme(plot.title = element_text(hjust = 0.5)) +
# center the plot title
theme(plot.caption = element_text(face = "italic",size = 8)) +
# adding theme from ggthemes
theme_clean()
df <- mtcars
ggplot(data = df, aes(x = mpg)) +
geom_histogram(color = "blue", fill = "gray") +
# provide fill for filling bars and color for border of bars
labs(title = "Histogram of MPG from mtcars dataset", x = "Count", y = "Miles Per Gallon",
caption = "Data abstracted from the World Health Organisation") +
# labelling of the histogram
theme(plot.title = element_text(hjust = 0.5)) +
# center the plot title
theme(plot.caption = element_text(face = "italic",size = 8))
# adding theme from ggthemes
df <- mtcars
ggplot(data = df, aes(x = mpg)) +
geom_histogram(color = "blue", fill = "gray") +
# provide fill for filling bars and color for border of bars
labs(title = "Histogram of MPG from mtcars dataset", x = "Count", y = "Miles Per Gallon",
caption = "Data abstracted from the World Health Organisation") +
# labelling of the histogram
theme(plot.title = element_text(hjust = 0.5)) +
# center the plot title
theme(plot.caption = element_text(face = "italic",size = 8)) +
# adding theme from ggthemes
theme_gdocs()
df <- mtcars
ggplot(data = df, aes(x = mpg)) +
geom_histogram(color = "blue", fill = "gray") +
# provide fill for filling bars and color for border of bars
labs(title = "Histogram of MPG from mtcars dataset", x = "Count", y = "Miles Per Gallon",
caption = "Data abstracted from the World Health Organisation") +
# labelling of the histogram
theme(plot.title = element_text(hjust = 0.5)) +
# center the plot title
theme(plot.caption = element_text(face = "italic",size = 8))
df <- mtcars
ggplot(data = df, aes(x = mpg)) +
geom_histogram(color = "blue", fill = "gray") +
# provide fill for filling bars and color for border of bars
labs(title = "Histogram of MPG from mtcars dataset", x = "Count", y = "Miles Per Gallon",
caption = "Data abstracted from the World Health Organisation") +
# labelling of the histogram
theme(plot.title = element_text(hjust = 0.5)) +
# center the plot title
theme(plot.caption = element_text(face = "italic",size = 8)) +
theme_classic()
df <- mtcars
ggplot(data = df, aes(x = mpg)) +
geom_histogram(color = "blue", fill = "gray") +
# provide fill for filling bars and color for border of bars
labs(title = "Histogram of MPG from mtcars dataset", x = "Count", y = "Miles Per Gallon",
caption = "Data abstracted from the World Health Organisation") +
# labelling of the histogram
theme(plot.title = element_text(hjust = 0.5)) +
# center the plot title
theme(plot.caption = element_text(face = "italic",size = 8))
df <- mtcars
names(mtcars)
df <- mtcars
names(mtcars)
df2 <- moveMe(names(df), "disp first")
moveme <- function (invec, movecommand) {
movecommand <- lapply(strsplit(strsplit(movecommand, ";")[[1]],
",|\\s+"), function(x) x[x != ""])
movelist <- lapply(movecommand, function(x) {
Where <- x[which(x %in% c("before", "after", "first",
"last")):length(x)]
ToMove <- setdiff(x, Where)
list(ToMove, Where)
})
myVec <- invec
for (i in seq_along(movelist)) {
temp <- setdiff(myVec, movelist[[i]][[1]])
A <- movelist[[i]][[2]][1]
if (A %in% c("before", "after")) {
ba <- movelist[[i]][[2]][2]
if (A == "before") {
after <- match(ba, temp) - 1
}
else if (A == "after") {
after <- match(ba, temp)
}
}
else if (A == "first") {
after <- 0
}
else if (A == "last") {
after <- length(myVec)
}
myVec <- append(temp, values = movelist[[i]][[1]], after = after)
}
myVec
}
# this is primarily for vectors
# eg. moveMe(names(df),"g first") = will insert g as the first column
# moveMe(names(df), "g first; a last; e before c") = will do exactly as written in the code
# for dataframes , we need to use: df[moveMe(names(df),"g first")]
df <- mtcars
names(mtcars)
df2 <- moveme(names(df), "disp first")
df2
df <- mtcars
names(mtcars)
df2 <- df[moveme(names(df), "disp first")]
names(df2)
df <- mtcars
names(mtcars)
df2 <- df[moveme(names(df), "disp first")]
names(df2)
str(df2)
df <- mtcars
names(mtcars)
df2 <- df[moveme(names(df), "disp first")]
names(df2) # now df2 contains disp as the first column.
df2 <- df[moveme(names(df), "drat last")]
names(df2)
df <- mtcars
names(mtcars)
df2 <- df[moveme(names(df), "disp first")]
names(df2) # now df2 contains disp as the first column.
df2 <- df[moveme(names(df), "drat last")]
names(df2) # now drat is last
df2 <- df[moveme[names(df), "wt before cyl"]]
df <- mtcars
names(mtcars)
df2 <- df[moveme(names(df), "disp first")]
names(df2) # now df2 contains disp as the first column.
df2 <- df[moveme(names(df), "drat last")]
names(df2) # now drat is last
df2 <- df[moveme[(names(df), "wt before cyl")]
