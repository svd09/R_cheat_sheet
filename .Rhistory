library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
library(tidyverse) # import csv
library(haven) # import SAS, SPSS, STATA
library(readxl) # import excel files
mtcars
df <- mtcars
names(df) <- tolower(names(df))
df <- mtcars
names(df) <- toupper(names(df))
names(df)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
library(stringr)
names(df) <- stringr::str_to_title(names(df))
names(df)
# again using mtcars.
summary(df$Mpg)
# again using mtcars.
summary(df$Mpg)
summary(df$Cyl)
# now to keep only rows with Mpg < 20.
df2 <- df %>% filter(Mpg < 20)
# to keep only Mpg < 20 and
# again using mtcars.
summary(df$Mpg)
summary(df$Cyl)
# now to keep only rows with Mpg < 20.
df2 <- df %>% filter(Mpg < 20)
summary(df2$Mpg)
# to keep only Mpg < 20 and Cyl < 6
df3 <- df %>% filter(Pmg < 20 & Cyl < 6)
# again using mtcars.
summary(df$Mpg)
summary(df$Cyl)
# now to keep only rows with Mpg < 20.
df2 <- df %>% filter(Mpg < 20)
summary(df2$Mpg)
# to keep only Mpg < 20 and Cyl < 6
df3 <- df %>% filter(Pmg < 20) %>% filter(Cyl < 6)
# again using mtcars.
summary(df$Mpg)
summary(df$Cyl)
# now to keep only rows with Mpg < 20.
df2 <- df %>% filter(Mpg < 20)
summary(df2$Mpg)
# to keep only Mpg < 20 and Cyl < 6
df3 <- df %>% filter(Mpg < 20) %>% filter(Cyl < 6)
summary(df3[, c("Mpg","Cyl")])
glimpse(mtcars)
# again using mtcars.
summary(df$Mpg)
summary(df$Cyl)
# now to keep only rows with Mpg < 20.
df2 <- df %>% filter(Mpg < 20)
summary(df2$Mpg)
# to keep only Mpg < 20 and Cyl == 6
df3 <- df %>% filter(Mpg < 20) %>%
filter(Cyl == 6)
summary(df3[, c("Mpg","Cyl")])
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# using whole name of columns.
df4 <- df %>% select(Mpg, Cyl)
str(df4)
# using whole name of columns.
df4 <- df %>% select(Mpg, Cyl)
str(df4) # now contains only these two columns.
# now to only select according to type of column.
# am going to convert cylinder to factor.
df$Cyl <- as.factor(df$Cyl)
df4 <- df %>% select_if(is.factor)
str(df4)
# using whole name of columns.
df4 <- df %>% select(Mpg, Cyl)
str(df4) # now contains only these two columns.
# now to only select according to type of column.
# am going to convert cylinder to factor.
df$Cyl <- as.factor(df$Cyl)
df4 <- df %>% select_if(is.factor)
str(df4)
# on Cyl included as that one is the only factor in the df.
df4 <- df %>% select_if(is.numeric)
str(df4)
# using whole name of columns.
df4 <- df %>% select(Mpg, Cyl)
str(df4) # now contains only these two columns.
# now to only select according to type of column.
# am going to convert cylinder to factor.
df$Cyl <- as.factor(df$Cyl)
df4 <- df %>% select_if(is.factor)
str(df4)
# on Cyl included as that one is the only factor in the df.
df4 <- df %>% select_if(is.numeric)
str(df4) # now all but Cyl is included as that is a factor.
# we can also choose based on the name or part of the column name.
df4 <- df %>% select(contains("Mp"))
str(df4)
# using whole name of columns.
df4 <- df %>% select(Mpg, Cyl)
str(df4) # now contains only these two columns.
# now to only select according to type of column.
# am going to convert cylinder to factor.
df$Cyl <- as.factor(df$Cyl)
df4 <- df %>% select_if(is.factor)
str(df4)
# on Cyl included as that one is the only factor in the df.
df4 <- df %>% select_if(is.numeric)
str(df4) # now all but Cyl is included as that is a factor.
# we can also choose based on the name or part of the column name.
df4 <- df %>% select(contains("Mp"))
str(df4) # as only Mpg contains "Mp" that is the only column selected.
df4 <- df %>% select(starts_with("W"))
str(df4)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
font = "Fira")
opts_knit$set(width=75)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
summary(mtcars)
summary(df)
summary(df)
# now to create new variable gas_guzzler when Mpg < 20.
df2 <- df %>% mutate(gas_guzzler = ifelse(Mpg < 20, 1, 0))
str(df2)
summary(df)
# now to create new variable gas_guzzler when Mpg < 20.
df2 <- df %>% mutate(gas_guzzler = ifelse(Mpg < 20, 1, 0))
str(df2)
# to use mutate, we need to create a new df. Rather than using mutate, I prefer to use base R and ifelse.
df$gas_guzzler <- with(df, ifelse(Pmg < 20, 1, 0))
summary(df)
# now to create new variable gas_guzzler when Mpg < 20.
df2 <- df %>% mutate(gas_guzzler = ifelse(Mpg < 20, 1, 0))
str(df2)
# to use mutate, we need to create a new df. Rather than using mutate, I prefer to use base R and ifelse.
df$gas_guzzler <- with(df, ifelse(Mpg < 20, 1, 0))
summary(df$gas_guzzler)
summary(df)
# now to create new variable gas_guzzler when Mpg < 20.
df2 <- df %>% mutate(gas_guzzler = ifelse(Mpg < 20, 1, 0))
str(df2)
# to use mutate, we need to create a new df. Rather than using mutate, I prefer to use base R and ifelse.
df$gas_guzzler <- with(df, ifelse(Mpg < 20, 1, 0))
summary(df$gas_guzzler) # so using this code, I can create new variables without having to keep creating new dataframes. I know some code to create many variables at once, but I like to create 1 variable at a time and code iteratively.
# ifelse arguments can be nested to create as many values as needed.
# this may be the alternative to fct_recode.
df$gas_guzzler2 <- with(df, ifelse(
Mpg > 30, 0 ,
ifelse(Mpg < 20, 1, 2)
))
df %>% count(gas_guzzler2)
library(tidyverse) # import csv
library(haven) # import SAS, SPSS, STATA
library(readxl) # import excel files
library(strngr); library(magrittr)
library(tidyverse) # import csv
library(haven) # import SAS, SPSS, STATA
library(readxl) # import excel files
library(stringr); library(magrittr)
summary(df)
# now to create new variable gas_guzzler when Mpg < 20.
df2 <- df %>% mutate(gas_guzzler = ifelse(Mpg < 20, 1, 0))
str(df2)
# to use mutate, we need to create a new df. Rather than using mutate, I prefer to use base R and ifelse.
df$gas_guzzler <- with(df, ifelse(Mpg < 20, 1, 0))
summary(df$gas_guzzler) # so using this code, I can create new variables without having to keep creating new dataframes. I know some code to create many variables at once, but I like to create 1 variable at a time and code iteratively.
# ifelse arguments can be nested to create as many values as needed.
# this may be the alternative to fct_recode.
df$gas_guzzler2 <- with(df, ifelse(Mpg > 30, 0 ,
ifelse(Mpg < 20, 1, 2)
)) %$% as.factor()
df$gas_guzzler2 <- with(df, ifelse(Mpg > 30, 0 ,
ifelse(Mpg < 20, 1, 2)
)) %$% as.factor(.)
as.factor(df$gas_guzzler2) <- with(df, ifelse(Mpg > 30, 0 ,
ifelse(Mpg < 20, 1, 2)
))
df$gas_guzzler2 <- with(df, ifelse(Mpg > 30, 0 ,
ifelse(Mpg < 20, 1, 2)
))
df %>% count(gas_guzzler2) # do, now have this column as factor with 3 levels - 0/1/2
library(lubridate)
# library(nycflights13) has date columns in it.
df <- library(nycflights13)
install.packages("nycflights13")
library(lubridate)
# library(nycflights13) has date columns in it.
df <- library(nycflights13)
library(lubridate)
# library(nycflights13) has date columns in it.
df <- library(nycflights13)
glimpse(df)
library(lubridate)
# library(nycflights13) has date columns in it.
library(nycflights13)
df <- nycflights13::planes
df
library(lubridate)
# library(nycflights13) has date columns in it.
library(nycflights13)
df <- nycflights13::flights
df
library(lubridate)
# library(nycflights13) has date columns in it.
library(nycflights13)
df <- nycflights13::flights
summary(df)
df <- read_excel("C:\\github_rcode\\midcab\\midcab_paper\\reviseddf_alladded.xlsx",
sheet = 1)
df <- read_excel("C:\\github_rcode\\midcab\\midcab_paper\\revised_df_alladded.xlsx",
sheet = 1)
glimpse(df)
dput(names(df))
df2 <- df[, c( "date_of_surgery",
"dob",  "last_contact_date")]
df2$rowid <- 1:nrow(df2)
df3 <- df2[1:40, ]
write_csv(df3, "H:\\R_cheat_sheet\\date_df.csv")
library(lubridate)
# get dummy dataset with dates.
df <- read_csv("H:\\R_cheat_sheet\\date_df.csv")
glimpse(df)
library(lubridate)
# get dummy dataset with dates.
df <- read_csv("H:\\R_cheat_sheet\\date_df.csv")
glimpse(df) # I dont understand the error
library(lubridate)
# get dummy dataset with dates.
df <- read_csv("H:\\R_cheat_sheet\\date_df.csv")
glimpse(df)
# now first to declare the columns as date formats.
df[,c("date_of_surgery","dob","last_contact_date")] <- as_date(df[,c("date_of_surgery","dob","last_contact_date")])
library(lubridate)
# get dummy dataset with dates.
df <- read_csv("H:\\R_cheat_sheet\\date_df.csv")
glimpse(df)
# now first to declare the columns as date formats.
df$date_of_surgery <- as_date(df$date_of_surgery)
df$dob <- as_date(df$dob)
df$last_contact_date <- as_date(df$last_contact_date)
library(lubridate)
# get dummy dataset with dates.
df <- read_csv("H:\\R_cheat_sheet\\date_df.csv")
glimpse(df)
# now first to declare the columns as date formats.
df$date_of_surgery <- as_date(df$date_of_surgery)
df$dob <- as_date(df$dob)
df$last_contact_date <- as_date(df$last_contact_date)
# now before we use these columns we can do some simple date
# function.
today()
ymd(20210128)
month("2019-02-10")
month("2019-02-10")
year("2011-10-01")
day("2011-10-01")
df$surg_year = year(df$date_of_surgery)
df$surg_year = year(df$date_of_surgery)
head(df$surg_year, 10)
library(lubridate)
# get dummy dataset with dates.
df <- read_csv("H:\\R_cheat_sheet\\date_df.csv")
glimpse(df)
# now first to declare the columns as date formats.
df$date_of_surgery <- as_date(df$date_of_surgery)
df$dob <- as_date(df$dob)
df$last_contact_date <- as_date(df$last_contact_date)
# now before we use these columns we can do some simple date
# function.
today() # this is todays date, or when the rmarkdown was last knitted.
# Dates in R are presented by convention as ymd.
# ymd format is unambigious as it is conventionally used for date in most software programs.
ymd(20210128) # this can be used to change the numbers to dates.
# to extract the day, month or year from a date.
month("2019-02-10")
year("2011-10-01")
day("2011-10-01")
# this can be used to create new columns...
df$surg_year = year(df$date_of_surgery)
head(df$surg_year, 5)
tail(df$surg_year, 5)
df$dob_year = year(df$dob)
head(df$dob_year, 5)
# to subtract dates.
df$age_at_surgery <- (df$dob %--% df$date_of_surgery)/ddays(1)
# we conventionally present age a whole number.
df$age_at_surgery <- round(df$age_at_surgery, 0)
summary(df$age_at_surgery)
# to subtract dates.
df$age_at_surgery <- (df$dob %--% df$date_of_surgery)/ddays(1)
# now to convert to years, divide by 365.24
df$age_years <- df$age_at_surgery/365.24 # the .24 accounts for the leap years.
# we conventionally present age a whole number.
df$age_years <- round(df$age_years, 0)
summary(df$age_years)
# to obtain age of a patient today, we can use the today function...
df$cur_age <- (df$dob %--% today())/ddays(1)
df$cur_age <- round((df$cur_age/365.24),0)
summary(df$cur_age)
library(usethis)
usethis::use_readme_rmd()
